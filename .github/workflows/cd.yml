name: CD

on:
  push:
    branches: [main]

permissions:
  contents: read

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-web-vercel:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Vercel CLI
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: npm i -g vercel@latest
      - name: Pull Vercel Environment Information
        working-directory: apps/web
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: vercel pull --yes --environment=production --token=$VERCEL_TOKEN
      - name: Build
        working-directory: apps/web
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: vercel build --prod --token=$VERCEL_TOKEN
      - name: Deploy
        working-directory: apps/web
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN

  deploy-api-render:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Render deploy
        if: ${{ env.RENDER_API_KEY != '' && env.RENDER_SERVICE_ID != '' }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -s -X POST \
            -H "accept: application/json" \
            -H "authorization: Bearer ${RENDER_API_KEY}" \
            -H "content-type: application/json" \
            https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys \
            -d '{}'
